//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Unity/Input Controls/Input Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input Actions"",
    ""maps"": [
        {
            ""name"": ""InputMap"",
            ""id"": ""88474c97-e52a-4f7b-9ec7-ed79bed2dc2d"",
            ""actions"": [
                {
                    ""name"": ""PlayerMovement"",
                    ""type"": ""Value"",
                    ""id"": ""721d8e90-5f7d-4e0e-a133-7dcc84cb1863"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UpgradeUIButton"",
                    ""type"": ""Button"",
                    ""id"": ""d69ae342-163b-485d-b0e7-2f07266f42ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerNormalAttack"",
                    ""type"": ""Button"",
                    ""id"": ""8fe5cd11-2ac5-4faa-bd9f-0a59d034529c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerSpecialAttack"",
                    ""type"": ""Button"",
                    ""id"": ""e0359eff-9fa4-424b-b73e-31f2b091048e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerUltimateAttack"",
                    ""type"": ""Button"",
                    ""id"": ""bcd0e949-0745-439c-a5f4-c58a4a9635ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""10528899-8953-402a-a78a-88dd26b7ab39"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""dca0c156-1699-4445-a778-a7f87e65f62a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""b8f6b759-2980-4daf-87ff-1a9ffa763839"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""f5766012-40c8-4f82-94f7-af31ba45985e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a82f3e31-37af-48e4-9779-619124836614"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ab162509-ba47-4230-acca-44e3542692c8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""481775b3-fcd7-4afb-b89a-29b79c84c4b8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bc547b56-4c02-410c-a228-b8b657cb8deb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""4f90f15c-ac4f-4d6e-88cd-3baa4243b22f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""584123c7-0d92-44bf-9145-c92d07d92241"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dcaf95ba-d819-4ac2-a7f7-cffa75bcd82b"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""44d875a1-9ce8-429a-97fc-b9c074f8d65e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e07ed8c7-8853-4571-8a06-f3c4c692907d"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Joystick"",
                    ""id"": ""bf79c27a-040f-4cca-aefa-a8ba2bc75d6e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""db654e34-b151-4257-b790-a58287a48d9b"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fa07686c-e7f6-4630-9416-5f8aeeb00e82"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""367646f0-c1cb-47f8-b56b-78b9a2395fa1"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""aa60f492-656f-46e2-b58d-d184f1115378"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""26f96f28-b13a-4766-81be-70cebc2d20cc"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerNormalAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2cb1c0c-c880-46e8-ba9b-0770f3912b52"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerSpecialAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08593fcc-e351-4364-b081-af059d5ee35c"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerUltimateAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""339f35f9-2284-4ff0-9a80-dba29b5dbf08"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45a70dfb-e14e-494e-ac41-2c92e9b96b4f"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpgradeUIButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09f86b82-5d29-400e-a428-9ab41a319bcd"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32833e81-e318-4675-b38a-f7076230f4c1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""WeaponMap"",
            ""id"": ""85eb47e4-6968-4d9c-bac5-3cdae9996bee"",
            ""actions"": [
                {
                    ""name"": ""SwitchWeapon1"",
                    ""type"": ""Button"",
                    ""id"": ""95a816a8-3cea-4fe9-b2f6-0ad819b4a61c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeapon2"",
                    ""type"": ""Button"",
                    ""id"": ""fde4f9f1-a631-4463-b8e2-11a92f40d14a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeapon3"",
                    ""type"": ""Button"",
                    ""id"": ""b8524094-5b28-4fc9-bec5-2a0711f5108d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CycleWeaponRight"",
                    ""type"": ""Button"",
                    ""id"": ""882fbfd8-8ae7-4306-843b-fe9e3d02f40f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CycleWeaponLeft"",
                    ""type"": ""Button"",
                    ""id"": ""1cbb59b7-02ee-4185-b73a-005e6075097d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""04d87a4b-4827-4e9b-ba58-04704a21e3d9"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a8fc0db-fb5d-449b-ade9-9b47e0c0dcf8"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""732f2f57-eb1f-414c-96b2-303c87c8897e"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ecc919d-d811-4cb0-8cb1-de2776cd6132"",
                    ""path"": ""<Keyboard>/#(E)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CycleWeaponRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""467210cc-f1e2-45bd-8616-acb6057d0ccd"",
                    ""path"": ""<Keyboard>/#(Q)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CycleWeaponLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InputMap
        m_InputMap = asset.FindActionMap("InputMap", throwIfNotFound: true);
        m_InputMap_PlayerMovement = m_InputMap.FindAction("PlayerMovement", throwIfNotFound: true);
        m_InputMap_UpgradeUIButton = m_InputMap.FindAction("UpgradeUIButton", throwIfNotFound: true);
        m_InputMap_PlayerNormalAttack = m_InputMap.FindAction("PlayerNormalAttack", throwIfNotFound: true);
        m_InputMap_PlayerSpecialAttack = m_InputMap.FindAction("PlayerSpecialAttack", throwIfNotFound: true);
        m_InputMap_PlayerUltimateAttack = m_InputMap.FindAction("PlayerUltimateAttack", throwIfNotFound: true);
        m_InputMap_MousePosition = m_InputMap.FindAction("MousePosition", throwIfNotFound: true);
        m_InputMap_Dash = m_InputMap.FindAction("Dash", throwIfNotFound: true);
        m_InputMap_Pause = m_InputMap.FindAction("Pause", throwIfNotFound: true);
        // WeaponMap
        m_WeaponMap = asset.FindActionMap("WeaponMap", throwIfNotFound: true);
        m_WeaponMap_SwitchWeapon1 = m_WeaponMap.FindAction("SwitchWeapon1", throwIfNotFound: true);
        m_WeaponMap_SwitchWeapon2 = m_WeaponMap.FindAction("SwitchWeapon2", throwIfNotFound: true);
        m_WeaponMap_SwitchWeapon3 = m_WeaponMap.FindAction("SwitchWeapon3", throwIfNotFound: true);
        m_WeaponMap_CycleWeaponRight = m_WeaponMap.FindAction("CycleWeaponRight", throwIfNotFound: true);
        m_WeaponMap_CycleWeaponLeft = m_WeaponMap.FindAction("CycleWeaponLeft", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InputMap
    private readonly InputActionMap m_InputMap;
    private List<IInputMapActions> m_InputMapActionsCallbackInterfaces = new List<IInputMapActions>();
    private readonly InputAction m_InputMap_PlayerMovement;
    private readonly InputAction m_InputMap_UpgradeUIButton;
    private readonly InputAction m_InputMap_PlayerNormalAttack;
    private readonly InputAction m_InputMap_PlayerSpecialAttack;
    private readonly InputAction m_InputMap_PlayerUltimateAttack;
    private readonly InputAction m_InputMap_MousePosition;
    private readonly InputAction m_InputMap_Dash;
    private readonly InputAction m_InputMap_Pause;
    public struct InputMapActions
    {
        private @InputActions m_Wrapper;
        public InputMapActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerMovement => m_Wrapper.m_InputMap_PlayerMovement;
        public InputAction @UpgradeUIButton => m_Wrapper.m_InputMap_UpgradeUIButton;
        public InputAction @PlayerNormalAttack => m_Wrapper.m_InputMap_PlayerNormalAttack;
        public InputAction @PlayerSpecialAttack => m_Wrapper.m_InputMap_PlayerSpecialAttack;
        public InputAction @PlayerUltimateAttack => m_Wrapper.m_InputMap_PlayerUltimateAttack;
        public InputAction @MousePosition => m_Wrapper.m_InputMap_MousePosition;
        public InputAction @Dash => m_Wrapper.m_InputMap_Dash;
        public InputAction @Pause => m_Wrapper.m_InputMap_Pause;
        public InputActionMap Get() { return m_Wrapper.m_InputMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputMapActions set) { return set.Get(); }
        public void AddCallbacks(IInputMapActions instance)
        {
            if (instance == null || m_Wrapper.m_InputMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InputMapActionsCallbackInterfaces.Add(instance);
            @PlayerMovement.started += instance.OnPlayerMovement;
            @PlayerMovement.performed += instance.OnPlayerMovement;
            @PlayerMovement.canceled += instance.OnPlayerMovement;
            @UpgradeUIButton.started += instance.OnUpgradeUIButton;
            @UpgradeUIButton.performed += instance.OnUpgradeUIButton;
            @UpgradeUIButton.canceled += instance.OnUpgradeUIButton;
            @PlayerNormalAttack.started += instance.OnPlayerNormalAttack;
            @PlayerNormalAttack.performed += instance.OnPlayerNormalAttack;
            @PlayerNormalAttack.canceled += instance.OnPlayerNormalAttack;
            @PlayerSpecialAttack.started += instance.OnPlayerSpecialAttack;
            @PlayerSpecialAttack.performed += instance.OnPlayerSpecialAttack;
            @PlayerSpecialAttack.canceled += instance.OnPlayerSpecialAttack;
            @PlayerUltimateAttack.started += instance.OnPlayerUltimateAttack;
            @PlayerUltimateAttack.performed += instance.OnPlayerUltimateAttack;
            @PlayerUltimateAttack.canceled += instance.OnPlayerUltimateAttack;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IInputMapActions instance)
        {
            @PlayerMovement.started -= instance.OnPlayerMovement;
            @PlayerMovement.performed -= instance.OnPlayerMovement;
            @PlayerMovement.canceled -= instance.OnPlayerMovement;
            @UpgradeUIButton.started -= instance.OnUpgradeUIButton;
            @UpgradeUIButton.performed -= instance.OnUpgradeUIButton;
            @UpgradeUIButton.canceled -= instance.OnUpgradeUIButton;
            @PlayerNormalAttack.started -= instance.OnPlayerNormalAttack;
            @PlayerNormalAttack.performed -= instance.OnPlayerNormalAttack;
            @PlayerNormalAttack.canceled -= instance.OnPlayerNormalAttack;
            @PlayerSpecialAttack.started -= instance.OnPlayerSpecialAttack;
            @PlayerSpecialAttack.performed -= instance.OnPlayerSpecialAttack;
            @PlayerSpecialAttack.canceled -= instance.OnPlayerSpecialAttack;
            @PlayerUltimateAttack.started -= instance.OnPlayerUltimateAttack;
            @PlayerUltimateAttack.performed -= instance.OnPlayerUltimateAttack;
            @PlayerUltimateAttack.canceled -= instance.OnPlayerUltimateAttack;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IInputMapActions instance)
        {
            if (m_Wrapper.m_InputMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInputMapActions instance)
        {
            foreach (var item in m_Wrapper.m_InputMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InputMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InputMapActions @InputMap => new InputMapActions(this);

    // WeaponMap
    private readonly InputActionMap m_WeaponMap;
    private List<IWeaponMapActions> m_WeaponMapActionsCallbackInterfaces = new List<IWeaponMapActions>();
    private readonly InputAction m_WeaponMap_SwitchWeapon1;
    private readonly InputAction m_WeaponMap_SwitchWeapon2;
    private readonly InputAction m_WeaponMap_SwitchWeapon3;
    private readonly InputAction m_WeaponMap_CycleWeaponRight;
    private readonly InputAction m_WeaponMap_CycleWeaponLeft;
    public struct WeaponMapActions
    {
        private @InputActions m_Wrapper;
        public WeaponMapActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchWeapon1 => m_Wrapper.m_WeaponMap_SwitchWeapon1;
        public InputAction @SwitchWeapon2 => m_Wrapper.m_WeaponMap_SwitchWeapon2;
        public InputAction @SwitchWeapon3 => m_Wrapper.m_WeaponMap_SwitchWeapon3;
        public InputAction @CycleWeaponRight => m_Wrapper.m_WeaponMap_CycleWeaponRight;
        public InputAction @CycleWeaponLeft => m_Wrapper.m_WeaponMap_CycleWeaponLeft;
        public InputActionMap Get() { return m_Wrapper.m_WeaponMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponMapActions set) { return set.Get(); }
        public void AddCallbacks(IWeaponMapActions instance)
        {
            if (instance == null || m_Wrapper.m_WeaponMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WeaponMapActionsCallbackInterfaces.Add(instance);
            @SwitchWeapon1.started += instance.OnSwitchWeapon1;
            @SwitchWeapon1.performed += instance.OnSwitchWeapon1;
            @SwitchWeapon1.canceled += instance.OnSwitchWeapon1;
            @SwitchWeapon2.started += instance.OnSwitchWeapon2;
            @SwitchWeapon2.performed += instance.OnSwitchWeapon2;
            @SwitchWeapon2.canceled += instance.OnSwitchWeapon2;
            @SwitchWeapon3.started += instance.OnSwitchWeapon3;
            @SwitchWeapon3.performed += instance.OnSwitchWeapon3;
            @SwitchWeapon3.canceled += instance.OnSwitchWeapon3;
            @CycleWeaponRight.started += instance.OnCycleWeaponRight;
            @CycleWeaponRight.performed += instance.OnCycleWeaponRight;
            @CycleWeaponRight.canceled += instance.OnCycleWeaponRight;
            @CycleWeaponLeft.started += instance.OnCycleWeaponLeft;
            @CycleWeaponLeft.performed += instance.OnCycleWeaponLeft;
            @CycleWeaponLeft.canceled += instance.OnCycleWeaponLeft;
        }

        private void UnregisterCallbacks(IWeaponMapActions instance)
        {
            @SwitchWeapon1.started -= instance.OnSwitchWeapon1;
            @SwitchWeapon1.performed -= instance.OnSwitchWeapon1;
            @SwitchWeapon1.canceled -= instance.OnSwitchWeapon1;
            @SwitchWeapon2.started -= instance.OnSwitchWeapon2;
            @SwitchWeapon2.performed -= instance.OnSwitchWeapon2;
            @SwitchWeapon2.canceled -= instance.OnSwitchWeapon2;
            @SwitchWeapon3.started -= instance.OnSwitchWeapon3;
            @SwitchWeapon3.performed -= instance.OnSwitchWeapon3;
            @SwitchWeapon3.canceled -= instance.OnSwitchWeapon3;
            @CycleWeaponRight.started -= instance.OnCycleWeaponRight;
            @CycleWeaponRight.performed -= instance.OnCycleWeaponRight;
            @CycleWeaponRight.canceled -= instance.OnCycleWeaponRight;
            @CycleWeaponLeft.started -= instance.OnCycleWeaponLeft;
            @CycleWeaponLeft.performed -= instance.OnCycleWeaponLeft;
            @CycleWeaponLeft.canceled -= instance.OnCycleWeaponLeft;
        }

        public void RemoveCallbacks(IWeaponMapActions instance)
        {
            if (m_Wrapper.m_WeaponMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWeaponMapActions instance)
        {
            foreach (var item in m_Wrapper.m_WeaponMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WeaponMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WeaponMapActions @WeaponMap => new WeaponMapActions(this);
    public interface IInputMapActions
    {
        void OnPlayerMovement(InputAction.CallbackContext context);
        void OnUpgradeUIButton(InputAction.CallbackContext context);
        void OnPlayerNormalAttack(InputAction.CallbackContext context);
        void OnPlayerSpecialAttack(InputAction.CallbackContext context);
        void OnPlayerUltimateAttack(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IWeaponMapActions
    {
        void OnSwitchWeapon1(InputAction.CallbackContext context);
        void OnSwitchWeapon2(InputAction.CallbackContext context);
        void OnSwitchWeapon3(InputAction.CallbackContext context);
        void OnCycleWeaponRight(InputAction.CallbackContext context);
        void OnCycleWeaponLeft(InputAction.CallbackContext context);
    }
}
